package lists

import "common/models/foaie"
import "fmt"
import "golang.org/x/text/currency"
import common "webapp/templates/common"

type FilteredLists struct {
    Values []foaie.Foaie
    FieldsShouldRender foaie.FieldMask
    CurrencyFormatter currency.Formatter
}

templ field(name string) {
    <th>@fieldOrCell(name)</th>
}

templ cell(value fmt.Stringer) {
    <td>@fieldOrCell(value.String())</td>
}

templ fieldOrCell(value string) {
    <div class="p-3">{ value }</div>
}

templ lists(c *FilteredLists) {
    <table class="table-auto">
        <tr>
            {{
                names := foaie.ValueForEachField[string]{}
                *names.Id() = "id"
                *names.Tip() = "type"
                *names.Pret() = "price"
                *names.ProvidedTransport() = "transport?"
                *names.Hotel() = "hotel"
            }}
            for v := range names.MaskedIter(c.FieldsShouldRender) {
                @field(*v.Value)
            }
        </tr>

    for i := range c.Values {
        {{ f := &c.Values[i] }}
        <tr>
            {{
                valueStrings := foaie.ValueForEachField[fmt.Stringer]{}

                // All of these have to stay in scope so this doesn't allocate.
                idStringer := common.StringerFormat1{
                    Format: "%d",
                    Value: int(f.Id),
                }
                tipStringer := common.StringerString{
                    Str: f.Tip,
                }
                pretStringer := common.StringerFormatter{
                    Formatter: c.CurrencyFormatter(f.Pret),
                }
                transportStringer := common.StringerString{
                    Str: func() string {
                        if f.ProvidedTransport {
                            return "yes"
                        }
                        return "no"
                    }(),
                }
                hotelStringer := common.StringerString{
                    Str: f.Hotel,
                }

                *valueStrings.Id() = &idStringer
                *valueStrings.Tip() = &tipStringer
                *valueStrings.Pret() = &pretStringer
                *valueStrings.ProvidedTransport() = &transportStringer
                *valueStrings.Hotel() = &hotelStringer
            }}
            for v := range valueStrings.MaskedIter(c.FieldsShouldRender) {
                @cell(*v.Value)
            }
        </tr>
    }
    </table>
}

templ Page(c *FilteredLists) {
    @common.Page(lists(c))
}
